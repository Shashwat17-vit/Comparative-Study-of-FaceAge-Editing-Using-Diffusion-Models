{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM8dP4KwinV9z8YCzY27uIV",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Shashwat17-vit/Comparative-Study-of-FaceAge-Editing-Using-Diffusion-Models/blob/main/EAI.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hG-hUonitqXe"
      },
      "outputs": [],
      "source": [
        "import streamlit as st\n",
        "import requests\n",
        "import json\n",
        "import csv\n",
        "import os\n",
        "from typing import Optional, Dict, Any\n",
        "\n",
        "EXTRACTION_API_URL = \"https://plankton-app-qajlk.ondigitalocean.app/extraction_api\"\n",
        "MATCH_API_URL = \"https://endeavor-interview-api-gzwki.ondigitalocean.app/match\"\n",
        "\n",
        "def extract_pdf_content(file) -> Optional[list]:\n",
        "    files = {'file': (file.name, file, 'application/pdf')}\n",
        "    headers = {'accept': 'application/json'}\n",
        "    try:\n",
        "        response = requests.post(EXTRACTION_API_URL, files=files, headers=headers)\n",
        "        response.raise_for_status()\n",
        "        data = response.json()\n",
        "        if isinstance(data, list):\n",
        "            return data\n",
        "        else:\n",
        "            st.error(\"Unexpected response format from extraction API.\")\n",
        "            return None\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        st.error(f\"Error calling extraction API: {e}\")\n",
        "        return None\n",
        "\n",
        "def get_first_match(description: str, limit: int = 5) -> Optional[Dict[str, Any]]:\n",
        "    params = {\"query\": description, \"limit\": limit}\n",
        "    try:\n",
        "        response = requests.get(MATCH_API_URL, params=params)\n",
        "        response.raise_for_status()\n",
        "        data = response.json()\n",
        "        if isinstance(data, list) and len(data) > 0:\n",
        "            return data[0]\n",
        "        else:\n",
        "            return None\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        st.error(f\"Error calling match API: {e}\")\n",
        "        return None\n",
        "\n",
        "def save_csv(data, output_path=\"output.csv\"):\n",
        "    with open(output_path, \"w\", newline=\"\", encoding=\"utf-8\") as f:\n",
        "        writer = csv.DictWriter(f, fieldnames=data[0].keys())\n",
        "        writer.writeheader()\n",
        "        writer.writerows(data)\n",
        "    return output_path\n",
        "\n",
        "def main():\n",
        "    st.title(\"üìÑ Endeavor AI - PDF Extractor and Matcher\")\n",
        "    uploaded_file = st.file_uploader(\"Upload a PDF file\", type=[\"pdf\"])\n",
        "\n",
        "    if uploaded_file:\n",
        "        with st.spinner(\"Extracting data from PDF...\"):\n",
        "            line_items = extract_pdf_content(uploaded_file)\n",
        "\n",
        "        if line_items:\n",
        "            st.success(f\"‚úÖ Extracted {len(line_items)} line items.\")\n",
        "            updated_items = []\n",
        "\n",
        "            for idx, item in enumerate(line_items):\n",
        "                st.markdown(f\"### üîç Item {idx + 1}\")\n",
        "                description = item.get(\"Request Item\") or item.get(\"request item\") or \"\"\n",
        "                st.write(f\"**Description:** {description}\")\n",
        "\n",
        "                match_result = get_first_match(description)\n",
        "                suggested = match_result[\"match\"] if match_result else \"No match found\"\n",
        "                score = match_result[\"score\"] if match_result else None\n",
        "                st.write(f\"**Suggested Match:** {suggested}\")\n",
        "                st.write(f\"**Score:** {score}\")\n",
        "\n",
        "                choice = st.radio(f\"Accept suggestion for item {idx + 1}?\", [\"Yes\", \"No\"], key=idx)\n",
        "                if choice == \"Yes\":\n",
        "                    item[\"Matched Item\"] = suggested\n",
        "                    item[\"Match Score\"] = score\n",
        "                else:\n",
        "                    corrected = st.text_input(f\"Enter corrected match for item {idx + 1}\", key=f\"corrected_{idx}\")\n",
        "                    if corrected:\n",
        "                        item[\"Matched Item\"] = corrected\n",
        "                        item[\"Match Score\"] = \"User Corrected\"\n",
        "                    else:\n",
        "                        item[\"Matched Item\"] = None\n",
        "                        item[\"Match Score\"] = None\n",
        "\n",
        "                updated_items.append(item)\n",
        "\n",
        "            if st.button(\"üíæ Save Output\"):\n",
        "                json_path = \"updated_line_items.json\"\n",
        "                csv_path = \"output.csv\"\n",
        "\n",
        "                with open(json_path, \"w\") as f:\n",
        "                    json.dump(updated_items, f, indent=2)\n",
        "\n",
        "                save_csv(updated_items, csv_path)\n",
        "                st.success(f\"‚úÖ Saved results to `{json_path}` and `{csv_path}`\")\n",
        "\n",
        "                with open(json_path, \"rb\") as f:\n",
        "                    st.download_button(\"Download JSON\", f, file_name=json_path)\n",
        "\n",
        "                with open(csv_path, \"rb\") as f:\n",
        "                    st.download_button(\"Download CSV\", f, file_name=csv_path)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    }
  ]
}